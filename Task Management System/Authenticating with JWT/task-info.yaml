type: edu
files:
  - name: src/resources/application.properties
    visible: true
    text: |
      spring.datasource.url=jdbc:h2:file:../tms_db
      spring.datasource.driverClassName=org.h2.Driver
      spring.datasource.username=sa
      spring.datasource.password=sa
      
      spring.jpa.hibernate.ddl-auto=update
      
      spring.h2.console.enabled=true
      spring.h2.console.settings.trace=false
      spring.h2.console.settings.web-allow-others=false
      
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: src/taskmanagement/Application.java
    visible: true
    text: |
      package taskmanagement;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Application {
          public static void main(String[] args) {
              SpringApplication.run(Application.class, args);
          }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'org.springframework.boot:spring-boot-starter-security'
          implementation 'org.springframework.boot:spring-boot-starter-validation'
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
          runtimeOnly 'com.h2database:h2'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/ApplicationTests.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;
      
      import java.util.List;
      import java.util.Map;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;
      
      public class ApplicationTests extends SpringTest {
          private static final String fakeToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";
          private static final String accountsUrl = "/api/accounts";
          private static final String tasksUrl = "/api/tasks";
          private static final String tokenUrl = "/api/auth/token";
          private final Gson gson = new Gson();
      
          public ApplicationTests() {
              super("../tms_db.mv.db");
          }
      
          CheckResult testCreateUser(TestUser user, int expectedCode) {
              var content = gson.toJson(user);
              var response = post(accountsUrl, content).send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(actualCode, expectedCode)
                  );
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testLogin(TestUser user, int expectedCode) {
              var response = post(tokenUrl, Map.of())
                      .basicAuth(user.getEmail(), user.getPassword())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(actualCode, expectedCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("token", isString())
                  );
      
                  var token = response.getJson().getAsJsonObject().get("token").getAsString();
                  user.setToken(token);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testCreateTask(TestTask task, TestUser author, int expectedCode) {
              var content = gson.toJson(task);
              var response = post(tasksUrl, content)
                      .addHeader("Authorization", "Bearer " + author.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(actualCode, expectedCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isString())
                                  .value("title", task.getTitle())
                                  .value("description", task.getDescription())
                                  .value("status", "CREATED")
                                  .value("author", author.getEmail())
                  );
                  task.setAuthor(author.getEmail());
                  task.setStatus("CREATED");
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testGetAllTasks(TestUser user, List<TestTask> expectedTasks, int expectedCode) {
              return testGetTasksByAuthor(user, null, expectedTasks, expectedCode);
          }
      
          CheckResult testGetTasksByAuthor(TestUser user, String author, List<TestTask> expectedTasks, int expectedCode) {
              var request = get(tasksUrl).addHeader("Authorization", "Bearer " + user.getToken());
              if (author != null) {
                  request = request.addParam("author", author);
              }
      
              var response = request.send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  JsonArrayBuilder arrayBuilder = isArray(expectedTasks.size());
                  for (var task : expectedTasks) {
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("id", isString())
                              .value("title", task.getTitle())
                              .value("description", task.getDescription())
                              .value("status", task.getStatus())
                              .value("author", task.getAuthor());
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
                  expect(response.getContent()).asJson().check(arrayBuilder);
              }
      
              return CheckResult.correct();
          }
      
          private String getRequestDetails(HttpResponse response) {
              var uri = response.getRequest().getUri();
              var method = response.getRequest().getMethod();
              var requestBody = response.getRequest().getContent();
              return "\nRequest: %s %s\nRequest body: %s\n".formatted(method, uri, requestBody);
          }
      
          private CheckResult reloadServer() {
              try {
                  reloadSpring();
              } catch (Exception e) {
                  throw new WrongAnswer("Failed to reload application");
              }
              return CheckResult.correct();
          }
      
          TestUser alice = TestUser.alice();
          TestUser bob = TestUser.bob();
      
          TestTask firstTask = TestTask.task1();
          TestTask secondTask = TestTask.task2();
          TestTask thirdTask = TestTask.task3();
      
          @DynamicTest
          DynamicTesting[] dt = new DynamicTesting[]{
                  // register user
                  () -> testCreateUser(alice, 200), // #1
                  () -> testCreateUser(alice, 409),
                  () -> testCreateUser(alice.withEmail("ALICE@email.com"), 409),
                  () -> testCreateUser(bob, 200),
                  () -> testCreateUser(TestUser.withBadEmail(" "), 400), // #5
                  () -> testCreateUser(TestUser.withBadEmail(null), 400),
                  () -> testCreateUser(TestUser.withBadEmail("malformed@email."), 400),
                  () -> testCreateUser(TestUser.withBadPassword(null), 400),
                  () -> testCreateUser(TestUser.withBadPassword("      "), 400),
                  () -> testCreateUser(TestUser.withBadPassword("12345"), 400), // #10
      
                  // test login
                  () -> testLogin(alice, 200),
                  () -> testLogin(bob, 200),
                  () -> testLogin(alice.withPassword("badpassword"), 401),
                  () -> testLogin(alice.withEmail("test@test.com"), 401),
      
                  // create task
                  () -> testCreateTask(firstTask, alice, 200), // #15
                  () -> testCreateTask(secondTask, alice, 200),
                  () -> testCreateTask(thirdTask, bob, 200),
                  () -> testCreateTask(thirdTask.withTitle(null), bob, 400),
                  () -> testCreateTask(firstTask.withTitle(" "), bob, 400),
                  () -> testCreateTask(firstTask.withDescription(null), bob, 400),   // #20
                  () -> testCreateTask(firstTask.withDescription(" "), bob, 400),
      
                  // get all tasks
                  () -> testGetAllTasks(alice, List.of(thirdTask, secondTask, firstTask), 200),
                  () -> testGetAllTasks(bob, List.of(thirdTask, secondTask, firstTask), 200),
                  () -> testGetAllTasks(alice.withToken(""), List.of(), 401),
                  () -> testGetAllTasks(alice.withToken(fakeToken), List.of(thirdTask, secondTask, firstTask), 401), // #25
      
                  // get tasks by author
                  () -> testGetTasksByAuthor(alice, alice.getEmail(), List.of(secondTask, firstTask), 200),
                  () -> testGetTasksByAuthor(bob, alice.getEmail(), List.of(secondTask, firstTask), 200),
                  () -> testGetTasksByAuthor(alice, bob.getEmail(), List.of(thirdTask), 200),
                  () -> testGetTasksByAuthor(alice, "unknown", List.of(), 200),
      
                  // test persistence
                  this::reloadServer,  // #30
                  () -> testLogin(alice, 200),
                  () -> testGetAllTasks(alice, List.of(thirdTask, secondTask, firstTask), 200),
          };
      }
    learner_created: false
  - name: test/TestTask.java
    visible: false
    text: |
      public class TestTask {
          private final String title;
          private final String description;
          private String status;
          private String author;
      
          private TestTask(String title, String description) {
              this.title = title;
              this.description = description;
          }
      
          public static TestTask task1() {
              return new TestTask("title 1", "description 1");
          }
      
          public static TestTask task2() {
              return new TestTask("title 2", "description 2");
          }
      
          public static TestTask task3() {
              return new TestTask("title 3", "description 3");
          }
      
          public TestTask withTitle(String title) {
              var copy = new TestTask(title, this.description);
              copy.setStatus(this.status);
              copy.setAuthor(this.author);
              return copy;
          }
      
          public TestTask withDescription(String description) {
              var copy = new TestTask(this.title, description);
              copy.setStatus(this.status);
              copy.setAuthor(this.author);
              return copy;
          }
      
          public String getTitle() {
              return title;
          }
      
          public String getDescription() {
              return description;
          }
      
          public String getStatus() {
              return status;
          }
      
          public void setStatus(String status) {
              this.status = status;
          }
      
          public String getAuthor() {
              return author;
          }
      
          public void setAuthor(String author) {
              this.author = author;
          }
      }
    learner_created: false
  - name: test/TestUser.java
    visible: false
    text: |
      public class TestUser {
          private final String email;
          private final String password;
          private String token;
      
          private TestUser(String email, String password) {
              this.email = email;
              this.password = password;
          }
          public static TestUser alice() {
              return new TestUser("alice@email.com", "password");
          }
      
          public static TestUser bob() {
              return new TestUser("bob@example.com", "123456");
          }
      
          public static TestUser withBadEmail(String badEmail) {
              return new TestUser(badEmail, "password");
          }
      
          public static TestUser withBadPassword(String badPassword) {
              return new TestUser("test@test.com", badPassword);
          }
      
          public TestUser withEmail(String email) {
              return new TestUser(email, this.password);
          }
      
          public TestUser withPassword(String password) {
              return new TestUser(this.email, password);
          }
      
          public TestUser withToken(String token) {
              var copy = new TestUser(this.email, this.password);
              copy.setToken(token);
              return copy;
          }
      
          public String getEmail() {
              return email;
          }
      
          public String getPassword() {
              return password;
          }
      
          public String getToken() {
              return token;
          }
      
          public void setToken(String token) {
              this.token = token;
          }
      }
    learner_created: false
feedback_link: https://hyperskill.org/projects/423/stages/2461/implement#comment
status: Unchecked
record: -1
