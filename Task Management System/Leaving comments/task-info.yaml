type: edu
files:
  - name: src/resources/application.properties
    visible: true
    text: |
      spring.datasource.url=jdbc:h2:file:../tms_db
      spring.datasource.driverClassName=org.h2.Driver
      spring.datasource.username=sa
      spring.datasource.password=sa
      
      spring.jpa.hibernate.ddl-auto=update
      
      spring.h2.console.enabled=true
      spring.h2.console.settings.trace=false
      spring.h2.console.settings.web-allow-others=false
      
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: src/taskmanagement/Application.java
    visible: true
    text: |
      package taskmanagement;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Application {
          public static void main(String[] args) {
              SpringApplication.run(Application.class, args);
          }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'org.springframework.boot:spring-boot-starter-security'
          implementation 'org.springframework.boot:spring-boot-starter-validation'
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
          runtimeOnly 'com.h2database:h2'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/ApplicationTests.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;
      
      import java.util.List;
      import java.util.Map;
      import java.util.UUID;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;
      
      public class ApplicationTests extends SpringTest {
          private static final String fakeToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";
          private static final String accountsUrl = "/api/accounts";
          private static final String tasksUrl = "/api/tasks";
          private static final String tokenUrl = "/api/auth/token";
          private final Gson gson = new Gson();
      
          public ApplicationTests() {
              super("../tms_db.mv.db");
          }
      
          CheckResult testCreateUser(TestUser user, int expectedCode) {
              var content = gson.toJson(user);
              var response = post(accountsUrl, content).send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testLogin(TestUser user, int expectedCode) {
              var response = post(tokenUrl, Map.of())
                      .basicAuth(user.getEmail(), user.getPassword())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("token", isString())
                  );
      
                  var token = response.getJson().getAsJsonObject().get("token").getAsString();
                  user.setToken(token);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testCreateTask(TestTask task, TestUser author, int expectedCode) {
              var content = gson.toJson(task);
              var response = post(tasksUrl, content)
                      .addHeader("Authorization", "Bearer " + author.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isString())
                                  .value("title", task.getTitle())
                                  .value("description", task.getDescription())
                                  .value("status", "CREATED")
                                  .value("author", author.getEmail())
                                  .value("assignee", task.getAssignee() == null ? "none" : task.getAssignee())
                  );
                  var id = response.getJson().getAsJsonObject().get("id").getAsString();
                  task.setAuthor(author.getEmail());
                  task.setId(id);
                  task.setStatus("CREATED");
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testAssignTask(TestUser author, String assignee, TestTask task, int expectedCode) {
              var content = assignee != null ? "{\"assignee\":\"" + assignee + "\"}" : "{\"assignee\":\"none\"}";
              var endpoint = tasksUrl + "/" + task.getId() + "/assign";
              var response = put(endpoint, content)
                      .addHeader("Authorization", "Bearer " + author.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", task.getId())
                                  .value("title", task.getTitle())
                                  .value("description", task.getDescription())
                                  .value("status", "CREATED")
                                  .value("author", author.getEmail())
                                  .value("assignee", assignee == null ? "none" : assignee)
                  );
      
                  task.setAssignee(assignee);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testChangeStatus(TestUser user, TestTask task, String status, int expectedCode) {
              var content = "{\"status\":\"" + status + "\"}";
              var endpoint = tasksUrl + "/" + task.getId() + "/status";
              var response = put(endpoint, content)
                      .addHeader("Authorization", "Bearer " + user.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", task.getId())
                                  .value("title", task.getTitle())
                                  .value("description", task.getDescription())
                                  .value("status", status)
                                  .value("author", task.getAuthor())
                                  .value("assignee", task.getAssignee() == null ? "none" : task.getAssignee())
                  );
      
                  task.setStatus(status);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testPostComment(TestUser author, TestTask task, TestComment comment, int expectedCode) {
              var content = "{\"text\":\"" + comment.getText() + "\"}";
              var endpoint = tasksUrl + "/" + task.getId() + "/comments";
              var response = post(endpoint, content)
                      .addHeader("Authorization", "Bearer " + author.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  comment.setTaskId(task.getId());
                  comment.setAuthor(author.getEmail());
                  task.incrementTotalComments();
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testGetComments(TestUser user, TestTask task, List<TestComment> expectedComments, int expectedCode) {
              var endpoint = tasksUrl + "/" + task.getId() + "/comments";
              var response = get(endpoint)
                      .addHeader("Authorization", "Bearer " + user.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  JsonArrayBuilder arrayBuilder = isArray(expectedComments.size());
                  for (var comment : expectedComments) {
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("id", isString())
                              .value("task_id", comment.getTaskId())
                              .value("text", comment.getText())
                              .value("author", comment.getAuthor());
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
                  expect(response.getContent()).asJson().check(arrayBuilder);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testGetAllTasks(TestUser user, List<TestTask> expectedTasks, int expectedCode) {
              return testGetTasksByAuthorAndAssignee(user, null, null, expectedTasks, expectedCode);
          }
      
          CheckResult testGetTasksByAuthorAndAssignee(TestUser user, String author, String assignee, List<TestTask> expectedTasks, int expectedCode) {
              var request = get(tasksUrl).addHeader("Authorization", "Bearer " + user.getToken());
              if (author != null) {
                  request = request.addParam("author", author);
              }
              if (assignee != null) {
                  request = request.addParam("assignee", assignee);
              }
      
              var response = request.send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  JsonArrayBuilder arrayBuilder = isArray(expectedTasks.size());
                  for (var task : expectedTasks) {
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("id", task.getId())
                              .value("title", task.getTitle())
                              .value("description", task.getDescription())
                              .value("status", task.getStatus())
                              .value("author", task.getAuthor())
                              .value("assignee", task.getAssignee() == null ? "none" : task.getAssignee())
                              .value("total_comments", task.getTotalComments() == null ? 0 : task.getTotalComments());
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
                  expect(response.getContent()).asJson().check(arrayBuilder);
              }
      
              return CheckResult.correct();
          }
      
          private String getRequestDetails(HttpResponse response) {
              var uri = response.getRequest().getUri();
              var method = response.getRequest().getMethod();
              var requestBody = response.getRequest().getContent();
              return "\nRequest: %s %s\nRequest body: %s\n".formatted(method, uri, requestBody);
          }
      
          private CheckResult reloadServer() {
              try {
                  reloadSpring();
              } catch (Exception e) {
                  throw new WrongAnswer("Failed to reload application");
              }
              return CheckResult.correct();
          }
      
          TestUser alice = TestUser.alice();
          TestUser bob = TestUser.bob();
      
          TestTask task1 = TestTask.task1();
          TestTask task2 = TestTask.task2();
          TestTask task3 = TestTask.task3();
      
          TestComment comment1 = TestComment.comment1();
          TestComment comment2 = TestComment.comment2();
          TestComment comment3 = TestComment.comment3();
          TestComment comment4 = TestComment.comment4();
          TestComment comment5 = TestComment.comment5();
      
          @DynamicTest
          DynamicTesting[] dt = new DynamicTesting[]{
                  // register user
                  () -> testCreateUser(alice, 200), // #1
                  () -> testCreateUser(alice, 409),
                  () -> testCreateUser(alice.withEmail("ALICE@email.com"), 409),
                  () -> testCreateUser(bob, 200),
                  () -> testCreateUser(TestUser.withBadEmail(" "), 400), // #5
                  () -> testCreateUser(TestUser.withBadEmail(null), 400),
                  () -> testCreateUser(TestUser.withBadEmail("malformed@email."), 400),
                  () -> testCreateUser(TestUser.withBadPassword(null), 400),
                  () -> testCreateUser(TestUser.withBadPassword("      "), 400),
                  () -> testCreateUser(TestUser.withBadPassword("12345"), 400), // #10
      
                  // test login
                  () -> testLogin(alice, 200),
                  () -> testLogin(bob, 200),
                  () -> testLogin(alice.withPassword("badpassword"), 401),
                  () -> testLogin(alice.withEmail("test@test.com"), 401),
      
                  // create task
                  () -> testCreateTask(task1, alice, 200), // #15
                  () -> testCreateTask(task2, alice, 200),
                  () -> testCreateTask(task3, bob, 200),
                  () -> testCreateTask(task3.withTitle(null), bob, 400),
                  () -> testCreateTask(task1.withTitle(" "), bob, 400),
                  () -> testCreateTask(task1.withDescription(null), bob, 400),   // #20
                  () -> testCreateTask(task1.withDescription(" "), bob, 400),
                  () -> testCreateTask(task1, bob.withToken(fakeToken), 401),
      
                  // test assignment
                  () -> testAssignTask(alice, bob.getEmail(), task1, 200),
                  () -> testAssignTask(alice, bob.getEmail(), task2, 200),
                  () -> testAssignTask(alice, null, task1, 200), // #25
                  () -> testAssignTask(bob, alice.getEmail(), task3, 200),
                  () -> testAssignTask(bob, bob.getEmail(), task1, 403),
                  () -> testAssignTask(alice, UUID.randomUUID() + "@test.com", task1, 404),
                  () -> testAssignTask(alice, bob.getEmail(), task1.withId("987654321"), 404),
                  () -> testAssignTask(alice.withToken(fakeToken), bob.getEmail(), task1, 401), // #30
      
                  // test change status
                  () -> testChangeStatus(alice, task1, "IN_PROGRESS", 200),
                  () -> testChangeStatus(alice, task2, "IN_PROGRESS", 200),
                  () -> testChangeStatus(bob, task2, "COMPLETED", 200),
                  () -> testChangeStatus(bob, task1, "COMPLETED", 403),
                  () -> testChangeStatus(alice, task1.withId("98765432"), "COMPLETED", 404), // #35
                  () -> testChangeStatus(alice.withToken(fakeToken), task1, "COMPLETED", 401),
      
                  // post comments
                  () -> testPostComment(alice, task1, comment1, 200),
                  () -> testPostComment(alice, task1, comment2, 200),
                  () -> testPostComment(bob, task1, comment3, 200),
                  () -> testPostComment(bob, task3, comment4, 200), // #40
                  () -> testPostComment(alice, task3, comment5, 200),
                  () -> testPostComment(alice, task3, comment5.withText("   "), 400),
                  () -> testPostComment(alice.withToken(fakeToken), task3, comment5, 401),
                  () -> testPostComment(alice, task3.withId("999558881"), comment5, 404),
      
                  // get comments
                  () -> testGetComments(alice, task1, List.of(comment3, comment2, comment1), 200), // #45
                  () -> testGetComments(alice, task2, List.of(), 200),
                  () -> testGetComments(alice, task3, List.of(comment5, comment4), 200),
                  () -> testGetComments(alice.withToken(fakeToken), task3, List.of(), 401),
                  () -> testGetComments(alice, task3.withId("123456789"), List.of(), 404),
      
                  // get all tasks
                  () -> testGetAllTasks(alice, List.of(task3, task2, task1), 200), // #50
                  () -> testGetAllTasks(bob, List.of(task3, task2, task1), 200),
                  () -> testGetAllTasks(alice.withToken(fakeToken), List.of(), 401),
      
                  // get tasks by author and assignee
                  () -> testGetTasksByAuthorAndAssignee(alice, alice.getEmail(), null, List.of(task2, task1), 200),
                  () -> testGetTasksByAuthorAndAssignee(bob, alice.getEmail(), null, List.of(task2, task1), 200),
                  () -> testGetTasksByAuthorAndAssignee(alice, bob.getEmail(), null, List.of(task3), 200), // #55
                  () -> testGetTasksByAuthorAndAssignee(alice, "unknown", null, List.of(), 200),
                  () -> testGetTasksByAuthorAndAssignee(alice, null, "unknown", List.of(), 200),
                  () -> testGetTasksByAuthorAndAssignee(alice, alice.getEmail(), bob.getEmail(), List.of(task2), 200),
                  () -> testGetTasksByAuthorAndAssignee(alice, bob.getEmail(), alice.getEmail(), List.of(task3), 200),
      
                  // test persistence
                  this::reloadServer, // #60
                  () -> testCreateUser(alice, 409),
                  () -> testLogin(alice, 200),
                  () -> testGetAllTasks(alice, List.of(task3, task2, task1), 200),
          };
      }
    learner_created: false
  - name: test/TestComment.java
    visible: false
    text: |
      public class TestComment {
          private String text;
          private String taskId;
          private String author;
      
          private TestComment(String text) {
              this.text = text;
          }
      
          public static TestComment comment1() {
              return new TestComment("comment 1");
          }
      
          public static TestComment comment2() {
              return new TestComment("comment 2");
          }
      
          public static TestComment comment3() {
              return new TestComment("comment 3");
          }
      
          public static TestComment comment4() {
              return new TestComment("comment 4");
          }
      
          public static TestComment comment5() {
              return new TestComment("comment 5");
          }
      
          public TestComment withText(String text) {
              var copy = new TestComment(text);
              copy.setTaskId(this.taskId);
              copy.setAuthor(this.author);
              return copy;
          }
      
          public String getText() {
              return text;
          }
      
          public String getTaskId() {
              return taskId;
          }
      
          public void setTaskId(String taskId) {
              this.taskId = taskId;
          }
      
          public String getAuthor() {
              return author;
          }
      
          public void setAuthor(String author) {
              this.author = author;
          }
      }
    learner_created: false
  - name: test/TestTask.java
    visible: false
    text: |
      public class TestTask {
          private String id;
          private final String title;
          private final String description;
          private String status;
          private String author;
      
          private String assignee;
          private Integer totalComments;
      
          private TestTask(String title, String description) {
              this.title = title;
              this.description = description;
          }
      
          public static TestTask task1() {
              return new TestTask("title 1", "description 1");
          }
      
          public static TestTask task2() {
              return new TestTask("title 2", "description 2");
          }
      
          public static TestTask task3() {
              return new TestTask("title 3", "description 3");
          }
      
          public TestTask withTitle(String title) {
              var copy = new TestTask(title, this.description);
              copy.setId(this.id);
              copy.setStatus(this.status);
              copy.setAuthor(this.author);
              copy.setAssignee(this.assignee);
              copy.setTotalComments(this.totalComments);
              return copy;
          }
      
          public TestTask withDescription(String description) {
              var copy = new TestTask(this.title, description);
              copy.setId(this.id);
              copy.setStatus(this.status);
              copy.setAuthor(this.author);
              copy.setAssignee(this.assignee);
              copy.setTotalComments(this.totalComments);
              return copy;
          }
      
          public TestTask withId(String id) {
              var copy = new TestTask(this.title, this.description);
              copy.setId(id);
              copy.setStatus(this.status);
              copy.setAuthor(this.author);
              copy.setAssignee(this.assignee);
              copy.setTotalComments(this.totalComments);
              return copy;
          }
      
          public String getId() {
              return id;
          }
      
          public void setId(String id) {
              this.id = id;
          }
      
          public String getTitle() {
              return title;
          }
      
          public String getDescription() {
              return description;
          }
      
          public String getStatus() {
              return status;
          }
      
          public void setStatus(String status) {
              this.status = status;
          }
      
          public String getAuthor() {
              return author;
          }
      
          public void setAuthor(String author) {
              this.author = author;
          }
      
          public String getAssignee() {
              return assignee;
          }
      
          public void setAssignee(String assignee) {
              this.assignee = assignee;
          }
      
          public Integer getTotalComments() {
              return totalComments;
          }
      
          public void setTotalComments(Integer totalComments) {
              this.totalComments = totalComments;
          }
      
          public void incrementTotalComments() {
              if (totalComments == null) {
                  totalComments = 1;
              } else {
                  totalComments++;
              }
          }
      }
    learner_created: false
  - name: test/TestUser.java
    visible: false
    text: |
      public class TestUser {
          private final String email;
          private final String password;
          private String token;
      
          private TestUser(String email, String password) {
              this.email = email;
              this.password = password;
          }
          public static TestUser alice() {
              return new TestUser("alice@email.com", "password");
          }
      
          public static TestUser bob() {
              return new TestUser("bob@example.com", "123456");
          }
      
          public static TestUser withBadEmail(String badEmail) {
              return new TestUser(badEmail, "password");
          }
      
          public static TestUser withBadPassword(String badPassword) {
              return new TestUser("test@test.com", badPassword);
          }
      
          public TestUser withEmail(String email) {
              return new TestUser(email, this.password);
          }
      
          public TestUser withPassword(String password) {
              return new TestUser(this.email, password);
          }
      
          public TestUser withToken(String token) {
              var copy = new TestUser(this.email, this.password);
              copy.setToken(token);
              return copy;
          }
      
          public String getEmail() {
              return email;
          }
      
          public String getPassword() {
              return password;
          }
      
          public String getToken() {
              return token;
          }
      
          public void setToken(String token) {
              this.token = token;
          }
      }
    learner_created: false
  - name: src/taskmanagement/tasks/CommentDTO.java
    visible: true
    learner_created: true
  - name: src/taskmanagement/tasks/CommentEntity.java
    visible: true
    learner_created: true
  - name: src/taskmanagement/tasks/CommentsRepository.java
    visible: true
    learner_created: true
  - name: src/taskmanagement/tasks/CommentResponseDTO.java
    visible: true
    learner_created: true
  - name: src/taskmanagement/tasks/TaskResponseGetDTO.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/40332#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 27 Feb 2024 17:10:36 UTC"
record: 6
