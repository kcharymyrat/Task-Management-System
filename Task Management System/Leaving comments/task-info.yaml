type: edu
files:
  - name: src/resources/application.properties
    visible: true
    text: |
      spring.datasource.url=jdbc:h2:file:../tms_db
      spring.datasource.driverClassName=org.h2.Driver
      spring.datasource.username=sa
      spring.datasource.password=sa
      
      spring.jpa.hibernate.ddl-auto=update
      
      spring.h2.console.enabled=true
      spring.h2.console.settings.trace=false
      spring.h2.console.settings.web-allow-others=false
      
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: src/taskmanagement/Application.java
    visible: true
    text: |
      package taskmanagement;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class Application {
          public static void main(String[] args) {
              SpringApplication.run(Application.class, args);
          }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'org.springframework.boot:spring-boot-starter-security'
          implementation 'org.springframework.boot:spring-boot-starter-validation'
          implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
          runtimeOnly 'com.h2database:h2'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/ApplicationTests.java
    visible: false
    text: |
      import com.google.gson.Gson;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonArrayBuilder;
      import org.hyperskill.hstest.testing.expect.json.builder.JsonObjectBuilder;
      
      import java.util.List;
      import java.util.Map;
      import java.util.UUID;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;
      
      public class ApplicationTests extends SpringTest {
          private static final String fakeToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c";
          private static final String accountsUrl = "/api/accounts";
          private static final String tasksUrl = "/api/tasks";
          private static final String tokenUrl = "/api/auth/token";
          private final Gson gson = new Gson();
      
          public ApplicationTests() {
              super("../tms_db.mv.db");
          }
      
          CheckResult testCreateUser(TestUser user, int expectedCode) {
              var content = gson.toJson(user);
              var response = post(accountsUrl, content).send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testLogin(TestUser user, int expectedCode) {
              var response = post(tokenUrl, Map.of())
                      .basicAuth(user.getEmail(), user.getPassword())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("token", isString())
                  );
      
                  var token = response.getJson().getAsJsonObject().get("token").getAsString();
                  user.setToken(token);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testCreateTask(TestTask task, TestUser author, int expectedCode) {
              var content = gson.toJson(task);
              var response = post(tasksUrl, content)
                      .addHeader("Authorization", "Bearer " + author.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isString())
                                  .value("title", task.getTitle())
                                  .value("description", task.getDescription())
                                  .value("status", "CREATED")
                                  .value("author", author.getEmail())
                                  .value("assignee", task.getAssignee() == null ? "none" : task.getAssignee())
                  );
                  var id = response.getJson().getAsJsonObject().get("id").getAsString();
                  task.setAuthor(author.getEmail());
                  task.setId(id);
                  task.setStatus("CREATED");
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testAssignTask(TestUser author, String assignee, TestTask task, int expectedCode) {
              var content = assignee != null ? "{\"assignee\":\"" + assignee + "\"}" : "{\"assignee\":\"none\"}";
              var endpoint = tasksUrl + "/" + task.getId() + "/assign";
              var response = put(endpoint, content)
                      .addHeader("Authorization", "Bearer " + author.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", task.getId())
                                  .value("title", task.getTitle())
                                  .value("description", task.getDescription())
                                  .value("status", "CREATED")
                                  .value("author", author.getEmail())
                                  .value("assignee", assignee == null ? "none" : assignee)
                  );
      
                  task.setAssignee(assignee);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testChangeStatus(TestUser user, TestTask task, String status, int expectedCode) {
              var content = "{\"status\":\"" + status + "\"}";
              var endpoint = tasksUrl + "/" + task.getId() + "/status";
              var response = put(endpoint, content)
                      .addHeader("Authorization", "Bearer " + user.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", task.getId())
                                  .value("title", task.getTitle())
                                  .value("description", task.getDescription())
                                  .value("status", status)
                                  .value("author", task.getAuthor())
                                  .value("assignee", task.getAssignee() == null ? "none" : task.getAssignee())
                  );
      
                  task.setStatus(status);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testPostComment(TestUser author, TestTask task, TestComment comment, int expectedCode) {
              var content = "{\"text\":\"" + comment.getText() + "\"}";
              var endpoint = tasksUrl + "/" + task.getId() + "/comments";
              var response = post(endpoint, content)
                      .addHeader("Authorization", "Bearer " + author.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  comment.setTaskId(task.getId());
                  comment.setAuthor(author.getEmail());
                  task.incrementTotalComments();
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testGetComments(TestUser user, TestTask task, List<TestComment> expectedComments, int expectedCode) {
              var endpoint = tasksUrl + "/" + task.getId() + "/comments";
              var response = get(endpoint)
                      .addHeader("Authorization", "Bearer " + user.getToken())
                      .send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  JsonArrayBuilder arrayBuilder = isArray(expectedComments.size());
                  for (var comment : expectedComments) {
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("id", isString())
                              .value("task_id", comment.getTaskId())
                              .value("text", comment.getText())
                              .value("author", comment.getAuthor());
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
                  expect(response.getContent()).asJson().check(arrayBuilder);
              }
      
              return CheckResult.correct();
          }
      
          CheckResult testGetAllTasks(TestUser user, List<TestTask> expectedTasks, int expectedCode) {
              return testGetTasksByAuthorAndAssignee(user, null, null, expectedTasks, expectedCode);
          }
      
          CheckResult testGetTasksByAuthorAndAssignee(TestUser user, String author, String assignee, List<TestTask> expectedTasks, int expectedCode) {
              var request = get(tasksUrl).addHeader("Authorization", "Bearer " + user.getToken());
              if (author != null) {
                  request = request.addParam("author", author);
              }
              if (assignee != null) {
                  request = request.addParam("assignee", assignee);
              }
      
              var response = request.send();
      
              System.out.println(getRequestDetails(response));
      
              var actualCode = response.getStatusCode();
              if (actualCode != expectedCode) {
                  return CheckResult.wrong(
                          "Expected status code %d but received %d".formatted(expectedCode, actualCode)
                  );
              }
      
              if (actualCode == 200) {
                  JsonArrayBuilder arrayBuilder = isArray(expectedTasks.size());
                  for (var task : expectedTasks) {
                      JsonObjectBuilder objectBuilder = isObject()
                              .value("id", task.getId())
                              .value("title", task.getTitle())
                              .value("description", task.getDescription())
                              .value("status", task.getStatus())
                              .value("author", task.getAuthor())
                              .value("assignee", task.getAssignee() == null ? "none" : task.getAssignee())
                              .value("total_comments", task.getTotalComments() == null ? 0 : task.getTotalComments());
                      arrayBuilder = arrayBuilder.item(objectBuilder);
                  }
                  expect(response.getContent()).asJson().check(arrayBuilder);
              }
      
              return CheckResult.correct();
          }
      
          private String getRequestDetails(HttpResponse response) {
              var uri = response.getRequest().getUri();
              var method = response.getRequest().getMethod();
              var requestBody = response.getRequest().getContent();
              return "\nRequest: %s %s\nRequest body: %s\n".formatted(method, uri, requestBody);
          }
      
          private CheckResult reloadServer() {
              try {
                  reloadSpring();
              } catch (Exception e) {
                  throw new WrongAnswer("Failed to reload application");
              }
              return CheckResult.correct();
          }
      
          TestUser alice = TestUser.alice();
          TestUser bob = TestUser.bob();
      
          TestTask task1 = TestTask.task1();
          TestTask task2 = TestTask.task2();
          TestTask task3 = TestTask.task3();
      
          TestComment comment1 = TestComment.comment1();
          TestComment comment2 = TestComment.comment2();
          TestComment comment3 = TestComment.comment3();
          TestComment comment4 = TestComment.comment4();
          TestComment comment5 = TestComment.comment5();
      
          @DynamicTest
          DynamicTesting[] dt = new DynamicTesting[]{
                  // register user
                  () -> testCreateUser(alice, 200), // #1
                  () -> testCreateUser(alice, 409),
                  () -> testCreateUser(alice.withEmail("ALICE@email.com"), 409),
                  () -> testCreateUser(bob, 200),
                  () -> testCreateUser(TestUser.withBadEmail(" "), 400), // #5
                  () -> testCreateUser(TestUser.withBadEmail(null), 400),
                  () -> testCreateUser(TestUser.withBadEmail("malformed@email."), 400),
                  () -> testCreateUser(TestUser.withBadPassword(null), 400),
                  () -> testCreateUser(TestUser.withBadPassword("      "), 400),
                  () -> testCreateUser(TestUser.withBadPassword("12345"), 400), // #10
      
                  // test login
                  () -> testLogin(alice, 200),
                  () -> testLogin(bob, 200),
                  () -> testLogin(alice.withPassword("badpassword"), 401),
                  () -> testLogin(alice.withEmail("test@test.com"), 401),
      
                  // create task
                  () -> testCreateTask(task1, alice, 200), // #15
                  () -> testCreateTask(task2, alice, 200),
                  () -> testCreateTask(task3, bob, 200),
                  () -> testCreateTask(task3.withTitle(null), bob, 400),
                  () -> testCreateTask(task1.withTitle(" "), bob, 400),
                  () -> testCreateTask(task1.withDescription(null), bob, 400),   // #20
                  () -> testCreateTask(task1.withDescription(" "), bob, 400),
                  () -> testCreateTask(task1, bob.withToken(fakeToken), 401),
      
                  // test assignment
                  () -> testAssignTask(alice, bob.getEmail(), task1, 200),
                  () -> testAssignTask(alice, bob.getEmail(), task2, 200),
                  () -> testAssignTask(alice, null, task1, 200), // #25
                  () -> testAssignTask(bob, alice.getEmail(), task3, 200),
                  () -> testAssignTask(bob, bob.getEmail(), task1, 403),
                  () -> testAssignTask(alice, UUID.randomUUID() + "@test.com", task1, 404),
                  () -> testAssignTask(alice, bob.getEmail(), task1.withId("987654321"), 404),
                  () -> testAssignTask(alice.withToken(fakeToken), bob.getEmail(), task1, 401), // #30
      
                  // test change status
                  () -> testChangeStatus(alice, task1, "IN_PROGRESS", 200),
                  () -> testChangeStatus(alice, task2, "IN_PROGRESS", 200),
                  () -> testChangeStatus(bob, task2, "COMPLETED", 200),
                  () -> testChangeStatus(bob, task1, "COMPLETED", 403),
                  () -> testChangeStatus(alice, task1.withId("98765432"), "COMPLETED", 404), // #35
                  () -> testChangeStatus(alice.withToken(fakeToken), task1, "COMPLETED", 401),
      
                  // post comments
                  () -> testPostComment(alice, task1, comment1, 200),
                  () -> testPostComment(alice, task1, comment2, 200),
                  () -> testPostComment(bob, task1, comment3, 200),
                  () -> testPostComment(bob, task3, comment4, 200), // #40
                  () -> testPostComment(alice, task3, comment5, 200),
                  () -> testPostComment(alice, task3, comment5.withText("   "), 400),
                  () -> testPostComment(alice.withToken(fakeToken), task3, comment5, 401),
                  () -> testPostComment(alice, task3.withId("999558881"), comment5, 404),
      
                  // get comments
                  () -> testGetComments(alice, task1, List.of(comment3, comment2, comment1), 200), // #45
                  () -> testGetComments(alice, task2, List.of(), 200),
                  () -> testGetComments(alice, task3, List.of(comment5, comment4), 200),
                  () -> testGetComments(alice.withToken(fakeToken), task3, List.of(), 401),
                  () -> testGetComments(alice, task3.withId("123456789"), List.of(), 404),
      
                  // get all tasks
                  () -> testGetAllTasks(alice, List.of(task3, task2, task1), 200), // #50
                  () -> testGetAllTasks(bob, List.of(task3, task2, task1), 200),
                  () -> testGetAllTasks(alice.withToken(fakeToken), List.of(), 401),
      
                  // get tasks by author and assignee
                  () -> testGetTasksByAuthorAndAssignee(alice, alice.getEmail(), null, List.of(task2, task1), 200),
                  () -> testGetTasksByAuthorAndAssignee(bob, alice.getEmail(), null, List.of(task2, task1), 200),
                  () -> testGetTasksByAuthorAndAssignee(alice, bob.getEmail(), null, List.of(task3), 200), // #55
                  () -> testGetTasksByAuthorAndAssignee(alice, "unknown", null, List.of(), 200),
                  () -> testGetTasksByAuthorAndAssignee(alice, null, "unknown", List.of(), 200),
                  () -> testGetTasksByAuthorAndAssignee(alice, alice.getEmail(), bob.getEmail(), List.of(task2), 200),
                  () -> testGetTasksByAuthorAndAssignee(alice, bob.getEmail(), alice.getEmail(), List.of(task3), 200),
      
                  // test persistence
                  this::reloadServer, // #60
                  () -> testCreateUser(alice, 409),
                  () -> testLogin(alice, 200),
                  () -> testGetAllTasks(alice, List.of(task3, task2, task1), 200),
          };
      }
    learner_created: false
  - name: test/TestComment.java
    visible: false
    text: |
      public class TestComment {
          private String text;
          private String taskId;
          private String author;
      
          private TestComment(String text) {
              this.text = text;
          }
      
          public static TestComment comment1() {
              return new TestComment("comment 1");
          }
      
          public static TestComment comment2() {
              return new TestComment("comment 2");
          }
      
          public static TestComment comment3() {
              return new TestComment("comment 3");
          }
      
          public static TestComment comment4() {
              return new TestComment("comment 4");
          }
      
          public static TestComment comment5() {
              return new TestComment("comment 5");
          }
      
          public TestComment withText(String text) {
              var copy = new TestComment(text);
              copy.setTaskId(this.taskId);
              copy.setAuthor(this.author);
              return copy;
          }
      
          public String getText() {
              return text;
          }
      
          public String getTaskId() {
              return taskId;
          }
      
          public void setTaskId(String taskId) {
              this.taskId = taskId;
          }
      
          public String getAuthor() {
              return author;
          }
      
          public void setAuthor(String author) {
              this.author = author;
          }
      }
    learner_created: false
  - name: test/TestTask.java
    visible: false
    text: |
      public class TestTask {
          private String id;
          private final String title;
          private final String description;
          private String status;
          private String author;
      
          private String assignee;
          private Integer totalComments;
      
          private TestTask(String title, String description) {
              this.title = title;
              this.description = description;
          }
      
          public static TestTask task1() {
              return new TestTask("title 1", "description 1");
          }
      
          public static TestTask task2() {
              return new TestTask("title 2", "description 2");
          }
      
          public static TestTask task3() {
              return new TestTask("title 3", "description 3");
          }
      
          public TestTask withTitle(String title) {
              var copy = new TestTask(title, this.description);
              copy.setId(this.id);
              copy.setStatus(this.status);
              copy.setAuthor(this.author);
              copy.setAssignee(this.assignee);
              copy.setTotalComments(this.totalComments);
              return copy;
          }
      
          public TestTask withDescription(String description) {
              var copy = new TestTask(this.title, description);
              copy.setId(this.id);
              copy.setStatus(this.status);
              copy.setAuthor(this.author);
              copy.setAssignee(this.assignee);
              copy.setTotalComments(this.totalComments);
              return copy;
          }
      
          public TestTask withId(String id) {
              var copy = new TestTask(this.title, this.description);
              copy.setId(id);
              copy.setStatus(this.status);
              copy.setAuthor(this.author);
              copy.setAssignee(this.assignee);
              copy.setTotalComments(this.totalComments);
              return copy;
          }
      
          public String getId() {
              return id;
          }
      
          public void setId(String id) {
              this.id = id;
          }
      
          public String getTitle() {
              return title;
          }
      
          public String getDescription() {
              return description;
          }
      
          public String getStatus() {
              return status;
          }
      
          public void setStatus(String status) {
              this.status = status;
          }
      
          public String getAuthor() {
              return author;
          }
      
          public void setAuthor(String author) {
              this.author = author;
          }
      
          public String getAssignee() {
              return assignee;
          }
      
          public void setAssignee(String assignee) {
              this.assignee = assignee;
          }
      
          public Integer getTotalComments() {
              return totalComments;
          }
      
          public void setTotalComments(Integer totalComments) {
              this.totalComments = totalComments;
          }
      
          public void incrementTotalComments() {
              if (totalComments == null) {
                  totalComments = 1;
              } else {
                  totalComments++;
              }
          }
      }
    learner_created: false
  - name: test/TestUser.java
    visible: false
    text: |
      public class TestUser {
          private final String email;
          private final String password;
          private String token;
      
          private TestUser(String email, String password) {
              this.email = email;
              this.password = password;
          }
          public static TestUser alice() {
              return new TestUser("alice@email.com", "password");
          }
      
          public static TestUser bob() {
              return new TestUser("bob@example.com", "123456");
          }
      
          public static TestUser withBadEmail(String badEmail) {
              return new TestUser(badEmail, "password");
          }
      
          public static TestUser withBadPassword(String badPassword) {
              return new TestUser("test@test.com", badPassword);
          }
      
          public TestUser withEmail(String email) {
              return new TestUser(email, this.password);
          }
      
          public TestUser withPassword(String password) {
              return new TestUser(this.email, password);
          }
      
          public TestUser withToken(String token) {
              var copy = new TestUser(this.email, this.password);
              copy.setToken(token);
              return copy;
          }
      
          public String getEmail() {
              return email;
          }
      
          public String getPassword() {
              return password;
          }
      
          public String getToken() {
              return token;
          }
      
          public void setToken(String token) {
              this.token = token;
          }
      }
    learner_created: false
  - name: src/taskmanagement/tasks/TaskRepository.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      import org.springframework.data.repository.CrudRepository;
      
      public interface TaskRepository extends CrudRepository<TaskEntity, Long> {
      }
    learner_created: true
  - name: src/taskmanagement/tasks/TaskService.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      import jakarta.transaction.Transactional;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.stereotype.Service;
      import taskmanagement.accounts.AppUser;
      import taskmanagement.accounts.AppUserRepository;
      
      import java.util.*;
      import java.util.stream.Collectors;
      
      @Service
      public class TaskService {
      
          private final AppUserRepository userRepository;
          private final TaskRepository taskRepository;
      
          @Autowired
          public TaskService(AppUserRepository userRepository, TaskRepository taskRepository) {
              this.userRepository = userRepository;
              this.taskRepository = taskRepository;
          }
      
          @Transactional
          public Optional<TaskEntity> createTaskEntity(String title, String description, String username) {
              // Get AppUser from UserDetails
              Optional<AppUser> optionalAppUser = userRepository.findByUsernameIgnoreCase(username);
              if (optionalAppUser.isEmpty()) {
                  return Optional.empty();
              }
              AppUser user = optionalAppUser.get();
      
              TaskEntity newTask = new TaskEntity();
              newTask.setTitle(title.trim());
              newTask.setDescription(description.trim());
      
              // Set the author of the task
              newTask.setAuthor(user);
      
              // Add the new task to the user's tasks
              user.getTasks().add(newTask);
      
              taskRepository.save(newTask);
              userRepository.save(user);
      
              return Optional.of(newTask);
          }
      
          public Optional<TaskEntity> getTaskEntityById(Long taskId) {
              return taskRepository.findById(taskId);
          }
      
          public TaskEntity updateTaskEntity(TaskEntity taskEntity) {
              taskRepository.save(taskEntity);
              return taskEntity;
          }
      
          public List<TaskResponseDTO> getAllTaskResponseDTOs() {
              List<TaskEntity> taskEntities = (List<TaskEntity>) taskRepository.findAll();
              List<TaskResponseDTO> taskResponseDTOList = taskEntities.stream()
                      .map(this::taskEntityToTaskResponseDTO)
                      .collect(Collectors.toList());
      
              Collections.reverse(taskResponseDTOList);
      
              return taskResponseDTOList;
          }
      
          public List<TaskResponseDTO> getAllTaskResponseDTOs(String author, String assignee) {
              Optional<AppUser> optionalAuthorAppUser = userRepository.findByUsernameIgnoreCase(author.trim().toLowerCase());
              Optional<AppUser> optionalAssigneeAppUser = userRepository.findByUsernameIgnoreCase(assignee.trim().toLowerCase());
      
              if (optionalAuthorAppUser.isEmpty() || optionalAssigneeAppUser.isEmpty()) {
                  return new ArrayList<TaskResponseDTO>();
              }
      
              AppUser authorUser = optionalAuthorAppUser.get();
              AppUser assigneeUser = optionalAssigneeAppUser.get();
      
              List<TaskEntity> taskEntities = (List<TaskEntity>) taskRepository.findAll();
      
              List<TaskResponseDTO> taskResponseDTOList = taskEntities.stream()
                      .filter(task -> task.getAuthor().equals(authorUser))
                      .filter(task -> task.getAssignee() != null && task.getAssignee().equals(assigneeUser))
                      .map(this::taskEntityToTaskResponseDTO)
                      .collect(Collectors.toList());;
      
              Collections.reverse(taskResponseDTOList);
      
              return taskResponseDTOList;
          }
      
          public List<TaskResponseDTO> getAllAssigneeTaskResponseDTOs(String assignee) {
              Optional<AppUser> optionalAppUser = userRepository.findByUsernameIgnoreCase(assignee.trim().toLowerCase());
              if (optionalAppUser.isEmpty()) {
                  return new ArrayList<TaskResponseDTO>();
              }
              AppUser user = optionalAppUser.get();
      
              List<TaskEntity> taskEntities = (List<TaskEntity>) taskRepository.findAll();
      
              List<TaskResponseDTO> taskResponseDTOList = taskEntities.stream()
                      .filter(task -> task.getAssignee() != null && task.getAssignee().equals(user))
                      .map(this::taskEntityToTaskResponseDTO)
                      .collect(Collectors.toList());;
      
              Collections.reverse(taskResponseDTOList);
      
              return taskResponseDTOList;
          }
      
      
          public List<TaskResponseDTO> getAllTaskResponseDTOs(String author) {
              Optional<AppUser> optionalAppUser = userRepository.findByUsernameIgnoreCase(author.trim().toLowerCase());
              if (optionalAppUser.isEmpty()) {
                  return new ArrayList<TaskResponseDTO>();
              }
              AppUser user = optionalAppUser.get();
      
              List<TaskEntity> taskEntities = (List<TaskEntity>) taskRepository.findAll();
      
              List<TaskResponseDTO> taskResponseDTOList = taskEntities.stream()
                      .filter(task -> task.getAuthor().equals(user))
                      .map(this::taskEntityToTaskResponseDTO)
                      .collect(Collectors.toList());;
      
              Collections.reverse(taskResponseDTOList);
      
              return taskResponseDTOList;
          }
      
          public TaskResponseDTO taskEntityToTaskResponseDTO(TaskEntity taskEntity) {
              String assignee = "none";
              if (taskEntity.getAssignee() != null) {
                  assignee = taskEntity.getAssignee().getUsername();
              }
      
              return new TaskResponseDTO(
                      taskEntity.getId().toString(),
                      taskEntity.getTitle(),
                      taskEntity.getDescription(),
                      taskEntity.getStatus().toString(),
                      taskEntity.getAuthor().getUsername(),
                      assignee
              );
          }
      }
    learner_created: true
  - name: src/taskmanagement/tasks/TaskDTO.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.NotNull;
      
      public record TaskDTO(
              @NotBlank
              @NotNull
              String title,
      
              @NotNull
              @NotBlank
              String description
      ) { }
    learner_created: true
  - name: src/taskmanagement/tasks/TaskResponseDTO.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.NotNull;
      
      import java.util.Optional;
      
      public record TaskResponseDTO(
              @NotBlank
              @NotNull
              String id,
      
              @NotBlank
              @NotNull
              String title,
      
              @NotBlank
              @NotNull
              String description,
      
              @NotBlank
              @NotNull
              String status,
      
              @NotBlank
              @NotNull
              String author,
      
              String assignee
      ) { }
    learner_created: true
  - name: src/taskmanagement/configs/RsaKeysConfig.java
    visible: true
    text: |-
      package taskmanagement.configs;
      
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      
      import java.security.KeyPair;
      import java.security.KeyPairGenerator;
      import java.security.NoSuchAlgorithmException;
      
      @Configuration
      public class RsaKeysConfig {
      
          @Bean
          public KeyPair generateRsaKeys() {
              try {
                  KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
                  keyPairGenerator.initialize(2048);
                  return keyPairGenerator.generateKeyPair();
              } catch (NoSuchAlgorithmException e) {
                  throw new IllegalStateException(e);
              }
      
          }
      }
    learner_created: true
  - name: src/taskmanagement/accounts/AccountsController.java
    visible: true
    text: |
      package taskmanagement.accounts;
      
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.Authentication;
      import org.springframework.security.core.GrantedAuthority;
      import org.springframework.security.oauth2.jwt.JwtClaimsSet;
      import org.springframework.security.oauth2.jwt.JwtEncoder;
      import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
      import org.springframework.web.bind.annotation.PostMapping;
      import org.springframework.web.bind.annotation.RequestBody;
      import org.springframework.web.bind.annotation.RestController;
      
      import java.time.Instant;
      import java.time.temporal.ChronoUnit;
      import java.util.List;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      @RestController
      public class AccountsController {
      
          private final AppUserDetailsServiceImpl userService;
          private final JwtEncoder jwtEncoder;
      
          @Autowired
          public AccountsController(AppUserDetailsServiceImpl userService, JwtEncoder jwtEncoder) {
              this.userService = userService;
              this.jwtEncoder = jwtEncoder;
          }
      
          @PostMapping("/api/auth/token")
          public ResponseEntity<TokenResponseDTO> token(Authentication authentication) {
              List<String> authorities = authentication.getAuthorities().stream()
                      .map(GrantedAuthority::getAuthority)
                      .toList();
      
              JwtClaimsSet claimsSet = JwtClaimsSet.builder()
                      .subject(authentication.getName())
                      .issuedAt(Instant.now())
                      .expiresAt(Instant.now().plus(60, ChronoUnit.SECONDS))
                      .claim("scope", authorities)
                      .build();
      
              String token = jwtEncoder.encode(JwtEncoderParameters.from(claimsSet))
                      .getTokenValue();
      
              return ResponseEntity.status(HttpStatus.OK).body(new TokenResponseDTO(token));
          }
      
          @PostMapping("api/accounts")
          public ResponseEntity<Void> register(@RequestBody RegistrationRequest request) {
              // check for the request
              if (request == null || request.email() == null || request.email().isBlank() || request.password() == null || request.password().isBlank()) {
                  return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
              }
      
              String email = request.email().trim().toLowerCase();
              String password = request.password().trim();
      
              // check if the email is valid
              if (!isValidEmail(email)) {
                  return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
              }
      
              // password shall be at least 8 char long
              if (password.length() < 6){
                  return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
              }
      
              // Check whether a user with username exists
              if (userService.findByUsernameIgnoreCase(email).isPresent()) {
                  return ResponseEntity.status(HttpStatus.CONFLICT).build();
              }
      
              // create new user
              userService.registerUser(email, password);
      
              return ResponseEntity.status(HttpStatus.OK).build();
          }
      
          private boolean isValidEmail(String email) {
              final String EMAIL_REGEX =
                      "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
              final Pattern pattern = Pattern.compile(EMAIL_REGEX);
              Matcher matcher = pattern.matcher(email);
              return matcher.matches();
          }
      
      }
    learner_created: true
  - name: src/taskmanagement/tasks/TaskEntity.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      import jakarta.persistence.*;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.NotNull;
      import taskmanagement.accounts.AppUser;
      
      @Entity
      @Table(name = "tasks")
      public class TaskEntity {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Long id;
      
          @NotBlank
          @NotNull
          private String title;
          private String description;
      
          @Enumerated(EnumType.STRING)
          private TaskStatus status = TaskStatus.CREATED;
      
          @ManyToOne
          @JoinColumn(name = "author_id", nullable = false)
          private AppUser author;
      
          @ManyToOne
          @JoinColumn(name = "assignee_id", nullable = true)
          private AppUser assignee;
      
          public TaskEntity() {
          }
      
          public Long getId() {
              return id;
          }
      
          public String getTitle() {
              return title;
          }
      
          public void setTitle(String title) {
              this.title = title;
          }
      
          public String getDescription() {
              return description;
          }
      
          public void setDescription(String description) {
              this.description = description;
          }
      
          public TaskStatus getStatus() {
              return status;
          }
      
          public void setStatus(TaskStatus status) {
              this.status = status;
          }
      
          public AppUser getAuthor() {
              return author;
          }
      
          public void setAuthor(AppUser author) {
              this.author = author;
          }
      
          public AppUser getAssignee() {
              return assignee;
          }
      
          public void setAssignee(AppUser assignee) {
              this.assignee = assignee;
          }
      }
    learner_created: true
  - name: src/taskmanagement/accounts/RegistrationRequest.java
    visible: true
    text: |
      package taskmanagement.accounts;
      
      public record RegistrationRequest(String email, String password) {
      }
    learner_created: true
  - name: src/taskmanagement/tasks/StatusDTO.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      import jakarta.persistence.EnumType;
      import jakarta.persistence.Enumerated;
      
      public record StatusDTO(String status) { }
    learner_created: true
  - name: src/taskmanagement/accounts/AppUserDetailsImpl.java
    visible: true
    text: |
      package taskmanagement.accounts;
      
      import org.springframework.security.core.GrantedAuthority;
      import org.springframework.security.core.authority.SimpleGrantedAuthority;
      import org.springframework.security.core.userdetails.UserDetails;
      
      import java.util.Collection;
      import java.util.List;
      
      public class AppUserDetailsImpl implements UserDetails {
      
          private final AppUser user;
      
          public AppUserDetailsImpl(AppUser user) {
              this.user = user;
          }
      
          @Override
          public Collection<? extends GrantedAuthority> getAuthorities() {
              return List.of(new SimpleGrantedAuthority(user.getAuthority()));
          }
      
          @Override
          public String getPassword() {
              return user.getPassword();
          }
      
          @Override
          public String getUsername() {
              return user.getUsername();
          }
      
          @Override
          public boolean isAccountNonExpired() {
              return true;
          }
      
          @Override
          public boolean isAccountNonLocked() {
              return true;
          }
      
          @Override
          public boolean isCredentialsNonExpired() {
              return true;
          }
      
          @Override
          public boolean isEnabled() {
              return true;
          }
      }
    learner_created: true
  - name: src/taskmanagement/configs/SecurityConfigs.java
    visible: true
    text: |
      package taskmanagement.configs;
      
      import com.nimbusds.jose.jwk.JWKSet;
      import com.nimbusds.jose.jwk.RSAKey;
      import com.nimbusds.jose.jwk.source.ImmutableJWKSet;
      import com.nimbusds.jose.jwk.source.JWKSource;
      import com.nimbusds.jose.proc.SecurityContext;
      import org.springframework.context.annotation.Bean;
      import org.springframework.context.annotation.Configuration;
      import org.springframework.http.HttpMethod;
      import org.springframework.security.config.Customizer;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
      import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;
      import org.springframework.security.config.http.SessionCreationPolicy;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.security.oauth2.jwt.JwtDecoder;
      import org.springframework.security.oauth2.jwt.JwtEncoder;
      import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
      import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
      import org.springframework.security.web.SecurityFilterChain;
      
      import java.security.KeyPair;
      import java.security.interfaces.RSAPublicKey;
      import java.util.UUID;
      
      @Configuration
      public class SecurityConfigs {
      
      
          @Bean
          public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
              return http
                      .httpBasic(Customizer.withDefaults()) // enable basic HTTP authentication
                      .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt) //enabling jwt authentication
                      .authorizeHttpRequests(auth -> auth
                              // other matchers
                              .requestMatchers("/error").permitAll() // expose the /error endpoint
                              .requestMatchers("/actuator/shutdown").permitAll() // required for tests
                              .requestMatchers("/api/accounts").permitAll()
                              .requestMatchers("/api/tasks", "/api/auth/token", "/api/tasks/{id}/assign").authenticated()
                              .requestMatchers(HttpMethod.PUT, "/api/tasks/{id}/status").authenticated()
                      )
                      .csrf(AbstractHttpConfigurer::disable) // allow modifying requests from tests
                      .sessionManagement(sessions ->
                              sessions.sessionCreationPolicy(SessionCreationPolicy.STATELESS) // no session
                      )
                      .build();
          }
      
          @Bean
          public PasswordEncoder passwordEncoder() {
              return new BCryptPasswordEncoder();
          }
      
      
          @Bean
          JwtDecoder jwtDecoder(KeyPair keyPair) {
              return NimbusJwtDecoder
                      .withPublicKey((RSAPublicKey) keyPair.getPublic())
                      .build();
          }
      
          @Bean
          JWKSource<SecurityContext> jwkSource(KeyPair keyPair) {
              RSAKey rsaKey = new RSAKey.Builder((RSAPublicKey) keyPair.getPublic())
                      .privateKey(keyPair.getPrivate())
                      .keyID(UUID.randomUUID().toString())
                      .build();
              JWKSet jwkSet = new JWKSet(rsaKey);
              return new ImmutableJWKSet<>(jwkSet);
          }
      
          @Bean
          public JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwkSource) {
              return new NimbusJwtEncoder(jwkSource);
          }
      
      
      
      
      }
    learner_created: true
  - name: src/taskmanagement/tasks/TasksController.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      import jakarta.validation.Valid;
      import org.aspectj.apache.bcel.classfile.SourceFile;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.core.Authentication;
      import org.springframework.security.core.context.SecurityContextHolder;
      import org.springframework.security.core.userdetails.UserDetails;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.web.bind.annotation.*;
      import taskmanagement.accounts.AppUser;
      import taskmanagement.accounts.AppUserDetailsServiceImpl;
      
      import java.util.List;
      import java.util.Objects;
      import java.util.Optional;
      
      @RestController
      public class TasksController {
      
          final private TaskService taskService;
          final private AppUserDetailsServiceImpl appUserDetailsService;
      
          public TasksController(TaskService taskService, AppUserDetailsServiceImpl appUserDetailsService) {
              this.taskService = taskService;
              this.appUserDetailsService = appUserDetailsService;
          }
      
          @PostMapping("/api/tasks")
          public ResponseEntity<TaskResponseDTO> postTasks(
                  @RequestBody @Valid TaskDTO taskDTO
          ) {
              Authentication auth = SecurityContextHolder.getContext().getAuthentication();
              System.out.println("Username: " + auth.getName());
              System.out.println("User has authorities/roles: " + auth.getAuthorities());
      
              Optional<TaskEntity> optionalTaskEntity = taskService.createTaskEntity(taskDTO.title(), taskDTO.description(), auth.getName());
      
              if (optionalTaskEntity.isEmpty()) {
                  return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
              }
      
              TaskEntity taskEntity = optionalTaskEntity.get();
              TaskResponseDTO taskResponseDTO = taskService.taskEntityToTaskResponseDTO(taskEntity);
      
              return ResponseEntity.status(HttpStatus.OK).body(taskResponseDTO);
          }
      
      
          @GetMapping("/api/tasks")
          public ResponseEntity<List<TaskResponseDTO>> getTasks(
                  @RequestParam(required = false) String author,
                  @RequestParam(required = false) String assignee
          ) {
              Authentication auth = SecurityContextHolder.getContext().getAuthentication();
              System.out.println("Username: " + auth.getName());
              System.out.println("User has authorities/roles: " + auth.getAuthorities());
              System.out.printf("author = %s, assignee = %s\n", author, assignee);
      
              if (author == null || author.isBlank() || author.isEmpty()) {
                  if (assignee == null || assignee.isBlank() || assignee.isEmpty()) {
                      return ResponseEntity.status(HttpStatus.OK).body(taskService.getAllTaskResponseDTOs());
                  }
                  return ResponseEntity.status(HttpStatus.OK).body(taskService.getAllAssigneeTaskResponseDTOs(assignee));
              } else {
                  if (assignee == null || assignee.isBlank() || assignee.isEmpty()) {
                      return ResponseEntity.status(HttpStatus.OK).body(taskService.getAllTaskResponseDTOs(author));
                  }
                  return ResponseEntity.status(HttpStatus.OK).body(taskService.getAllTaskResponseDTOs(author, assignee));
              }
          }
      
      
          @PutMapping("api/tasks/{id}/assign")
          public ResponseEntity<TaskResponseDTO> assignTask(
                  @PathVariable Long id,
                  @RequestBody AssigneeDTO assigneeDto
          ) {
              Authentication auth = SecurityContextHolder.getContext().getAuthentication();
              System.out.println("Username: " + auth.getName());
              System.out.println("User has authorities/roles: " + auth.getAuthorities());
      
              System.out.printf("assigneeDto = %s\n", assigneeDto);
      
              // Check if task with this id exist
              Optional<TaskEntity> optionalTaskEntity = taskService.getTaskEntityById(id);
              System.out.printf("optionalTaskEntity = %s\n", optionalTaskEntity);
              if (optionalTaskEntity.isEmpty()) {
                  return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
              }
              TaskEntity taskEntity = optionalTaskEntity.get();
              System.out.printf("taskEntity = %s\n", taskEntity);
      
              // Check if author is the same as the authenticated user
              String author = taskEntity.getAuthor().getUsername().trim().toLowerCase();
              String authUsername = auth.getName().trim().toLowerCase();
              System.out.printf("author = %s, authUsername = %s\n", author, authUsername);
              if (!author.equals(authUsername)) {
                  System.out.printf("HttpStatus.BAD_REQUEST = %s\n", HttpStatus.FORBIDDEN);
                  return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
              }
      
      
              // check if the assignee valid or if it is "none"
              if (assigneeDto.assignee().trim().equalsIgnoreCase("none")) {
                  taskEntity.setAssignee(null);
                  TaskEntity updatedTaskEntity = taskService.updateTaskEntity(taskEntity);
                  System.out.printf("updatedTaskEntity = %s\n", updatedTaskEntity);
      
                  TaskResponseDTO taskResponseDTO = taskService.taskEntityToTaskResponseDTO(updatedTaskEntity);
                  System.out.printf("none case - taskResponseDTO = %s\n", taskResponseDTO);
      
                  return ResponseEntity.status(HttpStatus.OK).body(taskResponseDTO);
              } else {
                  Optional<AppUser> optionalAppUser = appUserDetailsService.findByUsernameIgnoreCase(
                          assigneeDto.assignee().trim().toLowerCase()
                  );
                  System.out.printf("optionalAppUser = %s\n", optionalAppUser);
                  if (optionalAppUser.isEmpty()) {
                      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
                  }
                  AppUser assigneeAppUser = optionalAppUser.get();
                  System.out.printf("assigneeAppUser = %s\n", assigneeAppUser);
      
                  taskEntity.setAssignee(assigneeAppUser);
                  TaskEntity updatedTaskEntity = taskService.updateTaskEntity(taskEntity);
                  System.out.printf("updatedTaskEntity = %s\n", updatedTaskEntity);
      
                  TaskResponseDTO taskResponseDTO = taskService.taskEntityToTaskResponseDTO(updatedTaskEntity);
                  System.out.printf("taskResponseDTO = %s\n", taskResponseDTO);
      
                  return ResponseEntity.status(HttpStatus.OK).body(taskResponseDTO);
              }
      
          }
      
          @PutMapping("api/tasks/{id}/status")
          public ResponseEntity<TaskResponseDTO> updateTaskStatus(
                  @PathVariable Long id,
                  @RequestBody StatusDTO statusDTO
          ) {
              System.out.printf("statusDTO = %s\n", statusDTO);
      
              // Check if it is valid status
              if (statusDTO == null || statusDTO.status() == null || statusDTO.status().isBlank()) {
                  return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
              }
              String statusUpperCase = statusDTO.status().trim().toUpperCase();
              TaskStatus taskStatus;
              if (statusUpperCase.equalsIgnoreCase("CREATED")) {
                  taskStatus = TaskStatus.CREATED;
              } else if (statusUpperCase.equalsIgnoreCase("IN_PROGRESS")) {
                  taskStatus = TaskStatus.IN_PROGRESS;
              } else if(statusUpperCase.equalsIgnoreCase("COMPLETED")) {
                  taskStatus = TaskStatus.COMPLETED;
              } else {
                  return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
              }
      
      
              Authentication auth = SecurityContextHolder.getContext().getAuthentication();
              System.out.println("Username: " + auth.getName());
              System.out.println("User has authorities/roles: " + auth.getAuthorities());
      
              System.out.printf("statusDTO = %s\n", statusDTO);
      
              // Check if task with this id exist
              Optional<TaskEntity> optionalTaskEntity = taskService.getTaskEntityById(id);
              System.out.printf("optionalTaskEntity = %s\n", optionalTaskEntity);
              if (optionalTaskEntity.isEmpty()) {
                  return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
              }
              TaskEntity taskEntity = optionalTaskEntity.get();
              System.out.printf("taskEntity = %s\n", taskEntity);
      
              // Check if author is the same as the authenticated user or as assignee
              String author = taskEntity.getAuthor().getUsername().trim().toLowerCase();
              String authUsername = auth.getName().trim().toLowerCase();
              System.out.printf("author = %s, authUsername = %s\n", author, authUsername);
              if (!author.equalsIgnoreCase(authUsername)) {
                  if (taskEntity.getAssignee() == null) {
                      System.out.printf("HttpStatus.BAD_REQUEST = %s\n", HttpStatus.FORBIDDEN);
                      return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
                  }
      
                  System.out.printf("taskEntity.getAssignee() = %s, authUsername = %s\n", taskEntity.getAssignee(), authUsername);
                  String assignee = taskEntity.getAssignee().getUsername().trim().toLowerCase();
                  if (!author.equalsIgnoreCase(authUsername) && !assignee.equalsIgnoreCase(authUsername)) {
                      System.out.printf("HttpStatus.BAD_REQUEST = %s\n", HttpStatus.FORBIDDEN);
                      return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
                  }
              }
      
              taskEntity.setStatus(taskStatus);
      
              TaskEntity updatedTaskEntity = taskService.updateTaskEntity(taskEntity);
              System.out.printf("updatedTaskEntity = %s\n", updatedTaskEntity);
      
              TaskResponseDTO taskResponseDTO = taskService.taskEntityToTaskResponseDTO(updatedTaskEntity);
              System.out.printf("none case - taskResponseDTO = %s\n", taskResponseDTO);
      
              return ResponseEntity.status(HttpStatus.OK).body(taskResponseDTO);
          }
      }
    learner_created: true
  - name: src/taskmanagement/accounts/AppUserRepository.java
    visible: true
    text: |
      package taskmanagement.accounts;
      
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.data.repository.CrudRepository;
      
      import java.util.Optional;
      
      public interface AppUserRepository extends CrudRepository<AppUser, Long> {
          Optional<AppUser> findByUsernameIgnoreCase(String username);
      }
    learner_created: true
  - name: src/taskmanagement/accounts/TokenResponseDTO.java
    visible: true
    text: |
      package taskmanagement.accounts;
      
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.NotNull;
      
      public record TokenResponseDTO(
              @NotNull
              @NotBlank
              String token
      ) { }
    learner_created: true
  - name: src/taskmanagement/accounts/AppUser.java
    visible: true
    text: |
      package taskmanagement.accounts;
      
      import jakarta.persistence.*;
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.NotNull;
      import taskmanagement.tasks.TaskEntity;
      
      import java.util.ArrayList;
      import java.util.HashSet;
      import java.util.List;
      import java.util.Set;
      
      @Entity
      @Table(name = "app_users", uniqueConstraints = {@UniqueConstraint(columnNames = "username")})
      public class AppUser {
      
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Long id;
      
          @NotNull
          @NotBlank
          private String username;
      
          @NotNull
          @NotBlank
          private String password;
          private String authority = "ROLE_USER";
      
          @OneToMany(mappedBy = "author")
          private Set<TaskEntity> tasks = new HashSet<>();
      
          @Column(name = "assigned_task")
          @OneToMany(mappedBy = "assignee")
          private Set<TaskEntity> assignedTasks = new HashSet<>();
      
          public AppUser() {
          }
      
          public Long getId() {
              return id;
          }
      
      
          public String getUsername() {
              return username;
          }
      
          public void setUsername(String email) {
              this.username = email;
          }
      
          public String getPassword() {
              return password;
          }
      
          public void setPassword(String password) {
              this.password = password;
          }
      
          public String getAuthority() {
              return authority;
          }
      
          public void setAuthority(String authority) {
              this.authority = authority;
          }
      
          public Set<TaskEntity> getTasks() {
              return tasks;
          }
      
          public void addTask(TaskEntity task) {
              this.tasks.add(task);
          }
      
          public Set<TaskEntity> getAssignedTasks() {
              return assignedTasks;
          }
      
          public void addAssignedTask(TaskEntity task) {
              this.assignedTasks.add(task);
          }
      }
    learner_created: true
  - name: src/taskmanagement/tasks/TaskStatus.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      public enum TaskStatus {
          CREATED,
          IN_PROGRESS,
          COMPLETED
      }
    learner_created: true
  - name: src/taskmanagement/accounts/AppUserDetailsServiceImpl.java
    visible: true
    text: "package taskmanagement.accounts;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\
    import org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\n\
    import org.springframework.security.core.userdetails.UsernameNotFoundException;\n\
    import org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\
    \nimport java.util.Optional;\n\n@Service\npublic class AppUserDetailsServiceImpl\
    \ implements UserDetailsService {\n    private final AppUserRepository repository;\n\
    \    private final PasswordEncoder passwordEncoder;\n\n    @Autowired\n    public\
    \ AppUserDetailsServiceImpl(AppUserRepository repository, PasswordEncoder passwordEncoder)\
    \ {\n        this.repository = repository;\n        this.passwordEncoder = passwordEncoder;\n\
    \    }\n\n    @Override\n    public UserDetails loadUserByUsername(String username)\
    \ throws UsernameNotFoundException {\n        AppUser user = repository\n    \
    \            .findByUsernameIgnoreCase(username)\n                .orElseThrow(()\
    \ -> new UsernameNotFoundException(\"Not Found\"));\n\n        return new AppUserDetailsImpl(user);\n\
    \    }\n    \n    public Optional<AppUser> findByUsernameIgnoreCase(String username)\
    \ {\n        return repository.findByUsernameIgnoreCase(username);\n    }\n\n\
    \    public void registerUser(String email, String password) {\n        AppUser\
    \ user = new AppUser();\n        user.setUsername(email.trim().toLowerCase());\n\
    \        user.setPassword(passwordEncoder.encode(password.trim().toLowerCase()));\n\
    \        user.setAuthority(\"ROLE_USER\");\n        repository.save(user);\n \
    \   }\n}\n"
    learner_created: true
  - name: src/taskmanagement/tasks/AssigneeDTO.java
    visible: true
    text: |
      package taskmanagement.tasks;
      
      import jakarta.validation.constraints.NotBlank;
      import jakarta.validation.constraints.NotNull;
      
      public record AssigneeDTO(@NotBlank @NotNull String assignee) { }
    learner_created: true
feedback_link: https://hyperskill.org/projects/423/stages/2463/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #37

    Expected status code 200 but received 403
  time: "Mon, 26 Feb 2024 15:39:43 UTC"
record: -1
